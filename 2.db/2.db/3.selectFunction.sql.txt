-- 3.selectFunction.sql
-- 단일행 함수
/* Oracle Db 자체적인 지원 함수 다수 존재
1. 숫자 함수
2. 문자 함수
3. 날짜 함수 
4. ...
	Oracle 내에도 api 제공
	1. 호출해서 아용
		- 함수 호출
			1. 단일행 함수 : 하나의 row로 하나의 데이터값 반환
			2. 그룹 함수 : 여러개의 row로 하나의 데이터값 반환
	2. DB 사용자가 개발
		- PL SQL (오라클 자체 개발언어) : 함수 / 프로시저 개발 기능
		- 마치 DB에 존재하는 api 들처럼 재사용 (호출) 가능

5. 참고
	- 브라우저를 활용한 client 가 DB 정보를 활용하는 server 서비스 활용

 */


-- 오라클 dumy table 검색
-- dual table : 산술 연산 결과등을 확인하기 위한 임시 table
select * from dual;
select 2+3 from dual;
	-- 정상 5 값만 한번 검색
		select 2 + 3 from empl
		-- 5 값이 emp table에 튜플이 존재하는 수 만큼 검색
		-- 논리적인 검색 결과로는 문제 발생

-- sysdate : 현시스템 시간 반영가능한 속성
select sysdate from dual;




-- *** [숫자함수] ***
-- 1. 절대값 구하는 함수 : abs()

select 2, -2, abs(-2) from dual;


-- 2. 반올림 구하는 함수 : round(데이터 [, 반올림자릿수])

select 3.3, 3.6 , round(3.3), round(36.77,1), round(36.77,-1) from dual;
 3.3        3.6          3           36.8              40


-- 3. 지정한 자리수 이하 버리는 함수 : trunc()
-- trunc(데이터, 자릿수)
-- 자릿수 : +(소수점 이하), -(정수 의미)
-- 참고 : 존재하는 table의 데이터만 삭제시 방법 : delete[복원]/truncate[복원불가]

select 3.3, 3.6 , trunc(3.3), trunc(36.77,1), trunc(36.77,-1) from dual;


-- 4. 나누고 난 나머지 값 연산 함수 : mod() //자바는 %


select mod(17, 2) from dual;

-- 5. ? emp table에서 사번이 홀수인 사원의 이름, 사번 검색 

select ename, empno from emp where mod(empno,2) = 1 ;

select ename, empno from emp where mod(empno,2) != 0 ;

--6. 제곱수 구하는 함수 : power()

select power(2,2) from dual;



-- *** [문자함수] ***
-- 1. 대문자로 변화시키는 함수
-- upper() : 대문자[uppercase]
-- lower() : 소문자[lowercase]

select upper('Abc'),lower('TesT') from dual;



--2. ? manager로 job 칼럼과 뜻이 일치되는 사원의 사원명 검색하기 

	-- sql 문자열 표현시 ",manager 라는 데이터값을 함수 사용해서 가공 후 검색

select job from emp where job = upper('manager');
select job from emp where lower(job) = 'manager' ;

/* oracle DB 중에 교육용 무료 DB 사용중 

1. 특징 
	- xe 버전 : 한글 한 음절은 3 byte씩 사용
	- 정통 한글은 2 byte 씩 사용 *** 상용 DB들은 2 byte 씩 활용
2. 설치시 적용했던 데이터값
	- system 이라는 이미 존재하는 계정의 pw 값만 입력 (pw = manager)
3. 일반 DB 설치시에는 DB 자체에 별칭
	단, xe 현 번은 xe라는 별칭으로 자동 부여
	개발 언어로 DB 사용시 활용되는 이름
*/


--3. 문자열 길이 체크함수 : length()

select length('adbd'), length('한글') from dual;

--4. byte 수 체크 함수 : lengthb()

select lengthb('adbd'), lengthb('한글') from dual;


--5. 문자열 일부 추출 함수 : substr()
-- substr(데이터, 시작위치, 추출할 개수)

select substr('asdfdfd',2,2) from dual;

--6. ? 년도 구분없이 2월에 입사한 사원이름, 입사일 검색
-- date 타입에도 substr() 함수 사용 가능 

select ename, hiredate from emp where substr(hiredate,4,2) = '02';  // 그냥 02도 가능함


--7. 문자열 앞뒤의 잉여 여백 제거 함수 : trim()

select 'abc',length(' abc '),length(trim(' abc ')) from dual;


--8. ?문자열 앞뒤의 잉여 여백 제거후 문자열 길이 


-- *** [날짜 함수] ***
--1. ?어제, 오늘, 내일 날짜 검색 
-- 현재 시스템 날짜에 대한 정보 제공 속성 : sysdate

select sysdate-1 어제, sysdate 오늘, sysdate+1 내일 from dual;


--2.?emp table에서 근무일수 계산하기, 사번과 근무일수(반올림) 검색
	-- 검색한 결과값 문자열 결합 : || 결합연산자 사용 
	-- 힌트 sysdate : 숫자 연산, 날짜 연산 다 가능

select empno, round(sysdate-hiredate)||'일 경과' as 근무일수 from emp;


--3. 특정 개월수 더하는 함수 : add_months()
-- 6개월 이후 검색 

select add_months(sysdate,3) from dual;


--4. ? 입사일 이후 3개월 지난 일수 검색

select add_months(hiredate,3) as 3개월 후 from emp;


--5. 두 날짜 사이의 개월수 검색 : months_between()

select months_between(sysdate,'2017-08-04') from dual;
select months_between('2017-08-04',sysdate) from dual;


--6. 요일을 기준으로 특정 날짜 검색 : next_day() //요일을 기준으로 일주일치!!!

select sysdate, next_day(sysdate,'토요일') from dual; 

--7. 주어진 날짜를 기준으로 해당 달의 가장 마지막 날짜 : last_day()

select last_day(sysdate) from dual;


--8.? 2016년 2월의 마지막 날짜는?

select last_day('16/02/01') from dual;
select last_day('2016/02/01') from dual;
select last_day('16-02-01') from dual;



-- *** [형변환 함수] ***
--[1] to_char() : 날짜->문자, 숫자 -> 문자 
	-- to_char(날자데이타, '희망포멧문자열')
	-- 사용빈도 최고봉 ( to_char() / nvl() )
--[2] to_date() : 날짜로 변경 시키는 함수
--[3] to_number() : 문자열을 숫자로 변환



-- [1] to_char()
--1. 오늘 날짜를 'yyyy-mm-dd' 변환 : 
select to_char(sysdate, 'yyyy-mm-dd') from dual;
select to_char(sysdate, 'yyyy/mm/dd') from dual;

--dy는 요일 의미
select to_char(sysdate, 'yyyy-mm-dd dy') from dual;

-- hh:mi:ss = 12시간을 기준으로 시분초
select to_char(sysdate, 'yyyy-mm-dd hh:mi:ss') from dual;

-- hh24:mi:ss = 24시간을 기준으로 시분초
select to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss') from dual;

-- hh:mi:ss am = am과 pm은 오전 오후 의미, am을 주로 사용 
select to_char(sysdate, 'yyyy-mm-dd hh:mi:ss am') from dual;


--2.날짜의 round(), trunc()
-- 날짜의 round() : 정오를 기준으로 이 시간 초과시 무조건 다음 날짜
--			   : 가령 12까지를 원서 접수 또는 택배마감등
-- 날짜의 trunc() : 24시간 내의 모든 내용 당일 처리

select sysdate, round(sysdate), trunc(sysdate) from dual;


-- 3. 숫자를 문자형으로 변환 : to_char()
--1. 숫자를 원하는 형식으로 변환 검색
-- 9 : 자릿수 숫자 의미(자릿수 채우지 않음)
-- 0 :	 "		(자릿수 채움)
-- . : 소수점 표현
-- , : 원단위 표현
-- $ : 달러 
-- L or l : 로케일의 줄임말(os 자체의 인코딩 기본 정보로 해당 언어의 기본 통화표현)
select to_char(1234, '9999.99') from dual;
select to_char(1234, '$9999,99') from dual;
select to_char(1234, '9999') from dual;
select to_char(1234, '999,999') from dual;
select to_char(1234, '99999') from dual;
select to_char(1234, '00000') from dual;
select to_char(1234, 'L99,999') from dual;
select to_char(1234, 'l99,999') from dual;



--[2] to_date() : 날짜로 변경 시키는 함수

--1. 올해 며칠이 지났는지 검색(포멧 yyyy/mm/dd)
-- 문법 오류 : select sysdate-20160101) from dual;
-- 문법 오류 : select sysdate-'20160101' from dual;

select sysdate-to_date(20170101,'yyyy/mm/dd') from dual;
select round(sysdate-to_date(20170101,'yyyy/mm/dd')) from dual;


--2. to_date로 일반 문자열을 특정포멧으로 변경후 검색

select ename,hiredate from emp where hiredate = to_date('19801217','yyyy/mm/dd');
select ename,hiredate from emp where hiredate ='19801217';
select ename,hiredate from emp where hiredate ='1980-12-17';


--3. 문자열로 date타입 검색 가능[데이터값 표현이 유연함]



-- [3] to_number() : 문자열을 숫자로 변환
--1. '20,000'의 데이터에서 '10,000' 산술 연산하기 

select to_number('20000','99999') - to_number('10000','99999') from dual;

// ' ' 형태는 문자열이기때문에 연산 불가능 -> to_number() 를 통해 변환필요



-- *** 조건식 함수 *** //decode 라는 새로운 칼럼이 생성됨 -> 그래서 별칭 지어주면 좋음
-- decode()-if or switch문과 같은 함수 ***
-- decode(조건칼럼, 조건값1,  출력데이터1,
--			조건값2,   출력데이터2,
--				...
--			       default값);

--1. deptno 에 따른 출력 데이터 
select deptno, decode(deptno,	10, 'A',
						20, 'B',
						'무')
from emp;



--2. emp table의 월급여(sal) 인상계산
-- job이 ANALYST 5%인상, SALESMAN은 10% 인상, MANAGER는 15%, CLERK 20% 이상 


select empno, job, sal, decode(job, 'ANALYST', sal*1.05, 
				'SALESMAN', sal*1.1, 
				'MANAGER', sal*1.15,
				'CLERK', sal*1.2,
				sal) as 인상분 from emp;

--3. 'MANAGER'인 직군은 '갑', 'ANALYST' 직군은 '을', 나머지는 '병'으로 검색
-- 검색 데이터 ename, job, 갑?을?병? 검색 


select ename, job, decode(job, 'ANALYST', '을', 
				'MANAGER', '갑',
				'병') as 관계 from emp;
	

